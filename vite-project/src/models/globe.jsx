/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Jacobs Development (https://sketchfab.com/Jacobs_Development)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-planet-earth-7b1dc4f802a54a6297e7a46888a85f77
Title: Low Poly Planet Earth
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { a } from '@react-spring/three'

import globeScene from '../assets/3d/low_poly_planet_earth.glb'
import { useFrame, useThree } from "@react-three/fiber";

const Globe = ({ isRotating, setIsRotating, setCurrentStage, currentFocusPoint, ...props }) => {
    const globeRef = useRef();

    const { gl, viewport } = useThree();
    const { nodes, materials } = useGLTF(globeScene);

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
    }

    const handlePointerUp = (e) => {
        e.stopPropagation();
        e.preventDefault();
        setIsRotating(false);
    };

    const handlePointerMove = (e) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            // If rotation is enabled, calculate the change in clientX position
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      globeRef.current.rotation.y += delta * 0.01  * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
        }
    };

    const handleKeyDown = (event) => {
        if (event.key === "ArrowLeft") {
            if (!isRotating) setIsRotating(true);
            while(isRotating){

            
            globeRef.current.rotation.y += 0.005 * Math.PI;
            rotationSpeed.current = 1;
            }
          } else if (event.key === "ArrowRight") {
            console.log("pushed right arrow");
            if (!isRotating) setIsRotating(true);
      
            globeRef.current.rotation.y -= 0.005 * Math.PI;
            rotationSpeed.current = -0.007;
          }
    };

    const handleKeyUp = (event) => {
        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            setIsRotating(false);
        }
    };

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor;

            if(Math.abs(rotationSpeed.current) < .001){
                rotationSpeed.current = 0;
            }

            globeRef.current.rotation.y += rotationSpeed.current;
        } else {
            console.log("got here");
            const rotation = globeRef.current.rotation.y;

            const normalizedRotation =
                ((rotation % (1/820 * Math.PI)) + 1/820 * Math.PI) % (1/820 * Math.PI);

            // Set the current stage based on the island's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }
    });

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerUp);
        canvas.addEventListener('pointerup', handlePointerDown);
        canvas.addEventListener('pointermove', handlePointerMove);
        document.addEventListener('keydown', handleKeyUp);
        document.addEventListener('keyup', handleKeyDown);
        return () => {
            canvas.addEventListener('pointerdown', handlePointerUp);
            canvas.addEventListener('pointerup', handlePointerDown);
            canvas.addEventListener('pointermove', handlePointerMove);
            document.addEventListener('keydown', handleKeyUp);
            document.addEventListener('keyup', handleKeyDown);
        };

    }, [gl,handlePointerUp,handlePointerDown, handlePointerMove])

    return (
        <a.group ref={globeRef} {...props}>
            <mesh
                geometry={nodes.Object_Planet_0.geometry}
                material={materials.Planet}
                //position={[-0.045, 1.247, 0.066]}
                //rotation={[Math.PI, 0, Math.PI]}
            />
        </a.group>
    );
}

export default Globe;
